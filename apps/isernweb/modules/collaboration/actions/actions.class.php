<?php
// auto-generated by sfPropelCrud
// date: 2007/11/25 00:34:09
?>
<?php

/**
 * collaboration actions.
 *
 * @package    myisern-lime
 * @subpackage collaboration
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class collaborationActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('collaboration', 'list');
  }

  public function executeList()
  {
    $this->collaborations = CollaborationPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->collaboration = CollaborationPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->collaboration);
  }

  public function executeCreate()
  {
    $this->collaboration = new Collaboration();
    $this->prepareOrganizationOptions(); 
    $this->getCollaboratingOrganizationIds();
    $this->getCollaborationYears();
    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->collaboration = CollaborationPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->prepareOrganizationOptions(); 
    $this->getCollaboratingOrganizationIds();
    $this->getCollaborationYears();
    $this->forward404Unless($this->collaboration);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $collaboration = new Collaboration();
    }
    else
    {
      $collaboration = CollaborationPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($collaboration);
    }

    $collaboration->setId($this->getRequestParameter('id'));
    $collaboration->setName($this->getRequestParameter('name'));
    $collaboration->setDescription($this->getRequestParameter('description'));
    $collaboration->save();
    foreach ($collaboration->getCollaboratingOrganizations() as $co) { 
      $co->delete();
    } 

    foreach ($this->getRequestParameter('collaboratingOrganizations') as $orgId ) {
       $collaboratingOranization = new CollaboratingOrganization();
       $collaboratingOranization->setCollaborationId($collaboration->getId());
       $collaboratingOranization->setOrganizationId($orgId);
       $collaboratingOranization->save();
       $this->logMessage("[kevin] orgid = $orgId ");    	
    }
    foreach ($collaboration->getCollaborationYears() as $cy) {
      $cy->delete();
    }
    foreach ($this->getRequestParameter('collaborationYears') as $year) { 
       $collaborationYear = new Collaborationyear();
       $collaborationYear->setCollaborationId($collaboration->getId());
       $collaborationYear->setYear($year); 
       $collaborationYear->save();
    } 

    return $this->redirect('collaboration/show?id='.$collaboration->getId());
  }

  public function executeDelete()
  {
    $collaboration = CollaborationPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($collaboration);

    $collaboration->delete();

    return $this->redirect('collaboration/list');
  }
  public function handleErrorUpdate()
  {
   if (!$this->getRequestParameter('id'))
   {  
     $this->forward('collaboration', 'create'); 
   }
   else {
     $this->forward('collaboration', 'edit');
   }
  }
  public function prepareOrganizationOptions() {
    $organizations = OrganizationPeer::doSelect(new Criteria());
    $options = array();
    foreach ($organizations as $org)
    {
      $options[$org->getId()] = $org->getName();
    }
    asort($options);
    $this->options = $options;
  }
  public function getCollaboratingOrganizationIds() {

    $ids=array();
    if ($this->collaboration && $this->collaboration->getCollaboratingOrganizations() ) { 
      $ids = array_map('collaborationActions::orgId',$this->collaboration->getCollaboratingOrganizations());
    }
    $this->collaboratingOrganizationIds = $ids;
  }
  public function getCollaborationYears() {

    $years=array();
    if ($this->collaboration && $this->collaboration->getCollaborationYears() ) {
      $years = array_map('collaborationActions::collaborationYear',$this->collaboration->getCollaborationYears());
    }
    $this->collaborationYears = $years;
  }

  
  public static function orgId($co)
  {
       return $co->getOrganizationId();
  }
  public static function collaborationYear($cy)
  {
       return $cy->getYear();
  }
}
