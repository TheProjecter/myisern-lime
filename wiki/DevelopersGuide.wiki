#summary Guide to enhance the Mysern System.
= Introduction =

If you are a PHP Developers, you are welcome to download the source code for the Myisern project and enchance the system. Below is a guide to getting oriented with the system. 


= Getting Started =

Before you begin, you will need to [InstallSymfony install Symfony] and [InstallationGuide install MyIsern]. MyIsern used the Symfony framework so you may also want to read through some of the tutorial at the [http://www.symfony-project.org Symfony Project Home Page]. Symfony uses an MVC (Model-View-Controller) framework with an ORM (Object-Relationship-Management) backend. The system was developed using Mysql as a database but there are no database specific queries in the source code so another database could be used. 

= Database Setup =

If you installed phpmyadmin, you can use that tool to create your databases. You will need to create three database: `isern_production`, `isern_test` and `isern_development`. You should create a Mysql user 'isern' that has all permissions on that database. If you want to quickly setup the databases and Mysql user form the command line, do the following:

    * mysqladmin -u root create isern_production
    * mysqladmin -u root create isern_development
    * mysqladmin -u root create isern_test
    * mysql -u root
{{{
      CREATE USER 'isern'@'%' IDENTIFIED BY 'password_change_me';

      GRANT USAGE ON * . * TO 'isern'@'%' IDENTIFIED BY 'password_change_me' WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0 ;

      GRANT ALL PRIVILEGES ON `isern\_%` . * TO 'isern'@'%';
}}}

You have created the database but you still need to load the tables and the data. First edit the [http://myisern-lime.googlecode.com/svn/trunk/config/databases.yml config/database.yml] to use the database you just created. If you are not familiar with Yaml, you can read about it at the [http://www.yaml.org/ Yaml Website]. Symfony uses Yaml (instead of XML) for most of configuration. Yaml relies on indentation instead of tags which makes it easier to read. In Yaml, a new level of nesting is represented by 2 spaces. When editing Yaml files, be sure to double check the indentation before proceeding.

Next you will run the symfony task to create the database and load the data. From the root directory of the installation (mysiser-lime), issue the following command:

symfony propel-insert-sql
symfony propel-load-data isernweb

This will create the database tables and load the default isern data into the isern_development database. 


=== Isern Data Model ===

Symfony uses a tightly integrated ORM (Object-Relationship-Management) approach to object and Data Modeling. The schema for the MyIsern database can be found in [http://myisern-lime.googlecode.com/svn/trunk/config/schema.yml config/schema.yml]. This file is used by symfony to generate the database tables and the PHP classes that will access. Symfony is very smart and magically creates foreign key relationships between tables that follow the correct naming convention. For example, organization_type_id on the organizations table will be automatically assumed be a foreign key link to the organization_types table.

The generated PHP classes can be found in [http://myisern-lime.googlecode.com/svn/trunk/lib/model lib/model]. The PHP class files in  [http://myisern-lime.googlecode.com/svn/trunk/lib/model/om lib/model/om] or [http://myisern-lime.googlecode.com/svn/trunk/lib/model/map lib/model/map] should not be edited since they are generated by symfony and could be generated again if the application schema changes. If you wish to enhance the data model object, you add the necessary methods to the inherited versions of the Data Model files in [http://myisern-lime.googlecode.com/svn/trunk/lib/model lib/model]. As a rule, the Peer files (e.g. [http://myisern-lime.googlecode.com/svn/trunk/lib/model/UsersPeer.php UserPeer.php], [http://myisern-lime.googlecode.com/svn/trunk/lib/model/CollaborationPeer.php CollaborationPeer.php])  contains static methods which are used to get groups of objects like in a query. The other class files (e.g. [http://myisern-lime.googlecode.com/svn/trunk/lib/model/User.php User.php], [http://myisern-lime.googlecode.com/svn/trunk/lib/model/Collaboration.php Collaboration.php])  contain methods that will be available to individual classes. 

If you make changes to the database schema, you must use the symfony tasks to regenerate the model object.

== Enhancing the Application ==

The web application portion of MyIsern can can be found in [http://myisern-lime.googlecode.com/svn/trunk/apps/isernweb/ apps/isernweb]. Each controller/view can be found in the [http://myisern-lime.googlecode.com/svn/trunk/apps/isernweb/modules/ apps/isernweb/module]. Using collaboration as an example, the view files will be found in [http://myisern-lime.googlecode.com/svn/trunk/apps/isernweb/modules/collaboration/templates/ apps/isernweb/module/collaboration/templates] and the controller code resides in the [http://myisern-lime.googlecode.com/svn/trunk/apps/isernweb/modules/collaboration/actions/actions.class.php apps/isernweb/modules/collaboration/actions/actions.class.php]. Symfony also has a special folder for validation configuration. The directory for collaborations will be [http://myisern-lime.googlecode.com/svn/trunk/apps/isernweb/modules/collaboration/validate/ apps/isernweb/modules/collaboration/validate/]. Validation methods make use of validation classes which can be reused throughout the application. These Validation classes are found in [http://myisern-lime.googlecode.com/svn/trunk/apps/isernweb/lib apps/isernweb/lib].

You can begin enhancing the system by adding additional validations and enchancing the views and controllers.

== Testing MyIsern ==

Symfony includes the [http://trac.symfony-project.com/wiki/LimeTestingFramework Lime Testing Framework]. For most of the unit test developed for MyIsern, we are using the symfony plugin [http://trac.symfony-project.com/wiki/sfModelTestPlugin sfModelTestPlugin]. This plugin allows us to load test fixtures into the test database and gives us direct access to model objects in the test cases. Test fixtures can be found is [http://myisern-lime.googlecode.com/svn/trunk/test/fixtures/ test/fixtures]. Fixture ares stored in YAML format and you are welcome to add fixtures to to enhance your tests. They Symfony website has a detailed  [http://www.symfony-project.org/book/1_0/15-Unit-and-Functional-Testing chapter on Unit and Functional Testing] with Lime. The MyIsern test use many of the same techiniques but each test case is wrapped withint the sfMoldeTestPlugin classe. For an example, see [http://myisern-lime.googlecode.com/svn/trunk/test/functional/isernweb/collaboration/CreateOkTest.php test/functional/isernweb/collaboration/CreateOkTest.php]